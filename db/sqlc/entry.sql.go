// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entry.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
    account_id,
    amount
    ) VALUES (
    $1,
    $2
    ) RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64 `json:"account_id"`
	Amount    int64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, created_at FROM entries WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntry = `-- name: ListEntry :many
SELECT id, account_id, amount, created_at FROM entries
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEntryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntry(ctx context.Context, arg ListEntryParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntry, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntryFromAccountId = `-- name: ListEntryFromAccountId :many
SELECT id, account_id, amount, created_at FROM entries
WHERE account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEntryFromAccountIdParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListEntryFromAccountId(ctx context.Context, arg ListEntryFromAccountIdParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntryFromAccountId, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seachEntriesByAccountOwner = `-- name: SeachEntriesByAccountOwner :many
SELECT e.id, e.account_id, e.amount, e.created_at
FROM entries e
INNER JOIN accounts a ON e.account_id = a.id
WHERE a.owner ILIKE '%' || $3 || '%'
AND e.created_at >= $4 AND e.created_at <= $5
AND e.amount >= $6 AND e.amount <= $7
ORDER BY
CASE WHEN  $8 = 'amount' AND  $9 = 'ASC' THEN e.amount END  ASC,
CASE WHEN  $8 = 'amount' AND  $9 = 'DESC' THEN e.amount END DESC,
CASE WHEN  $8 = 'created_at' AND  $9 = 'ASC' THEN e.created_at END  ASC,
CASE WHEN  $8 = 'created_at' AND  $9 = 'DESC' THEN e.created_at END DESC,
CASE WHEN  $8 = 'id' AND  $9 = 'ASC' THEN e.id END  ASC,
CASE WHEN  $8 = 'id' AND  $9 = 'DESC' THEN e.id END DESC
LIMIT $1
OFFSET $2
`

type SeachEntriesByAccountOwnerParams struct {
	Limit       int32          `json:"limit"`
	Offset      int32          `json:"offset"`
	SearchQuery sql.NullString `json:"search_query"`
	StartDate   time.Time      `json:"start_date"`
	EndDate     time.Time      `json:"end_date"`
	MinAmount   int64          `json:"min_amount"`
	MaxAmount   int64          `json:"max_amount"`
	Field       interface{}    `json:"field"`
	OrderBy     interface{}    `json:"order_by"`
}

func (q *Queries) SeachEntriesByAccountOwner(ctx context.Context, arg SeachEntriesByAccountOwnerParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, seachEntriesByAccountOwner,
		arg.Limit,
		arg.Offset,
		arg.SearchQuery,
		arg.StartDate,
		arg.EndDate,
		arg.MinAmount,
		arg.MaxAmount,
		arg.Field,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries
SET amount = $2
WHERE id = $1
RETURNING id, account_id, amount, created_at
`

type UpdateEntryParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry, arg.ID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
